// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model World {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodes Node[]
  edges Edge[]

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  @@unique([createdById, name])
  @@index(fields: [id, createdById])
}

model Node {
  id   Int    @id @default(autoincrement())
  name String

  world   World @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId Int

  edges1 Edge[] @relation("edges1")
  edges2 Edge[] @relation("edges2")

  createdAt DateTime @default(now())

  @@unique([worldId, name])
  @@index(fields: [worldId])
}

model Edge {
  id     Int @id @default(autoincrement())
  weight Int

  world   World @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId Int

  node1   Node @relation("edges1", fields: [node1Id], references: [id], onDelete: Cascade)
  node1Id Int

  node2   Node @relation("edges2", fields: [node2Id], references: [id], onDelete: Cascade)
  node2Id Int

  createdAt DateTime @default(now())

  @@unique([node1Id, node2Id])
  @@index(fields: [worldId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  worlds        World[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
